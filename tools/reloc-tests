#!/bin/bash
#
# This script tests every recipe to ensure it can be successfully built with
# all of its dependencies built from a different path in the filesystem, to
# catch relocation problems.


abspath () {
    local path=$1
    if [[ -n ${path##/*} ]]; then
        path=$PWD/$1
    fi
    echo $path
}

run () {
    local msg="$1"
    shift
    local logfile="$1"
    shift

    if [[ $verbose -eq 1 ]]; then
        echo >&2 "$msg"
        eval "$@" 2>&1 | tee $logdir/$logfile.log || {
            echo >&2 "Error running $@:"
            tail -n 30 $logdir/$logfile.log >&2
            return 1
        }
    else
        printf >&2 "$msg..."
        eval "$@" 2>&1 >$logdir/$logfile.log || {
            printf >&2 "ERROR:\n"
            tail -n 30 $logdir/$logfile.log >&2
            return 1
        }
        printf >&2 "done\n"
    fi
}


set -e
set +m
cleanup=:

bindir=$(abspath ${0%/*})
topdir=$PWD

shortcircuit=0
assumesstate=0
verbose=0
deftarget=core-image-minimal
postfixes="-native -nativesdk -cross -crosssdk -sdk"
dot_to_recipes="$bindir/dot-to-recipes"

outputdir=$topdir/build
logdir=$outputdir/logs
completedfile=$outputdir/completed
excludefile=$outputdir/excluded
sstate_dir=$outputdir/sstate-cache
tmpdir=$outputdir/tmp


main () {
    process_arguments "$@"
    dotfile=$outputdir/task-depends.dot.$target
    recipefile=$outputdir/recipes.$target

    trap "eval \$cleanup; echo" EXIT
    mkdir -p $outputdir $logdir/results

    save_sstate
    cleanup="$cleanup; restore_sstate"

    setup_excludes
    cat $excludefile >$recipefile
    list_recipe_depends "$target" | while read recipe; do
        if ! grep -qx "$recipe" $recipefile; then
            echo $recipe
        fi
    done >>$recipefile
    prepare
    setup_test

    if [[ $verbose -eq 1 ]]; then
        echo "Recipes to test:"
        cat $recipefile | sed -e's,^,  ,'
    fi

    recipecount=$(cat $recipefile | wc -l)
    recipenum=1
    first=1
    while read recipe; do
        test_recipe $recipe $first $recipenum $recipecount
        first=0
        recipenum=$(($recipenum + 1))
    done <$recipefile
}

process_arguments () {
    eval set -- $(getopt -n $(basename $0) -o l:t:hsav -l log-directory:,tmp-directory:,help,short-circuit,assume-sstate,verbose -- "$@")

    while [[ $1 != '--' ]]; do
        case $1 in
            -l|--log-directory)
                shift
                logdir="$(abspath $1)"
                ;;
            -t|--tmp-directory)
                shift
                tmpdir="$(abspath $1)"
                ;;
            -s|--short-circuit)
                shortcircuit=1
                ;;
            -a|--assume-sstate)
                assumesstate=1
                ;;
            -v|--verbose)
                verbose=1
                ;;
            -h|--help)
                usage
                ;;
        esac
        shift
    done
    shift

    if [[ $# -eq 0 ]]; then
        target="$deftarget"
    else
        target="$1"
    fi
}

usage () {
    if [[ $# -gt 0 ]]; then
        echo >&2 "$@"
        echo >&2
    fi
    echo -e >&2 "Usage: $(basename $0) [options] [--] machine [target]"
    echo -e >&2
    echo -e >&2 "Default target: $deftarget"
    echo -e >&2
    echo -e >&2 'Options:'
    echo -e >&2 '-h or --help\t\tShow this help information'
    echo -e >&2 '-l or --log-directory\tSpecify path for all log files [default=[build directory]/logs]'
    echo -e >&2 '-s or --short-circuit\tOnly test the specified recipes, not their dependences'
    echo -e >&2 '-a or --assume-sstate\tAssume sstates are already available in [build directory]/sstate.safe -- do not populate it'
    echo -e >&2 '-v or --verbose\tIncreased verbosity (show bitbake output)'

    if [[ $# -gt 0 ]]; then
        exit 2
    else
        exit 0
    fi
}

save_sstate () {
    if [[ -e $sstate_dir ]]; then
        mv $sstate_dir $sstate_dir.orig
    fi
}

restore_sstate () {
    if [[ -e $sstate_dir.orig ]]; then
        mv $sstate_dir.orig $sstate_dir
    fi
}

setup_excludes () {
    # The wrapper script builds pseudo-native before anything else.  As a
    # result, we can't really test anything in that particular dependency
    # chain.  So generate a list of recipes for it and exclude those.
    list_recipe_depends pseudo-native >$excludefile
}

list_recipe_depends () {
    local target=$1
    local outdir=$(mktemp -d recipes.$target.XXXXXX)
    cd $outdir

    cleanup="rm -rf $outdir; $cleanup"
    run >&2 "Generating dependency graph for $target" depgraph.$target \
            bitbake -g $target
    $dot_to_recipes task-depends.dot $target
    cd - >/dev/null
    rm -rf $outdir
}

# Prepare build directory 1, generating the dependency graph and populating
# its sstate cache for all recipes, and moving build directory 1 so that
# the files in its sysroot will not be available for builds in build directory
# 2 to use
prepare () {
    if [[ -e $sstate_dir.populated ]]; then
        if [[ -e $sstate_dir ]]; then
            rmdir $sstate_dir
        fi
        mv $sstate_dir.populated $sstate_dir
    fi
    if [[ -e $tmpdir.populated ]]; then
        rm -rf $tmpdir.populating
        mv $tmpdir.populated $tmpdir.populating
    fi

    touch $topdir/conf/auto.conf
    sed -i -e'/^TMPDIR *=/d;' $topdir/conf/auto.conf
    sed -i -e'/^SSTATE_DIR *=/d;' $topdir/conf/auto.conf
    echo "SSTATE_DIR = \"$sstate_dir\"" >> $topdir/conf/auto.conf
    echo "TMPDIR = \"$tmpdir.populating\"" >> $topdir/conf/auto.conf

    oldcleanup="$cleanup"
    cleanup="if [ -e $sstate_dir ]; then mv $sstate_dir $sstate_dir.populated; fi; $cleanup"
    (
        set -e

        if [[ $assumesstate -eq 0 ]]; then
            run "Populating sstate cache" populate-sstate.$target \
                bake -k $target
        else
            echo "Skipped population of sstate cache"
        fi

        mv $tmpdir.populating $tmpdir.populated
    )
    cleanup="$oldcleanup"
    if [[ -e $sstate_dir ]]; then
        mv $sstate_dir $sstate_dir.populated
    fi
}

# Setup build directory 2, where we'll be testing the recipes
setup_test () {
    rm -rf $sstate_dir
    sed -i -e"s,^TMPDIR .*,TMPDIR = \"$tmpdir\"," $topdir/conf/auto.conf
}

die () {
    echo >&2 "$@"
    exit 1
}

# Test the build of a recipe with its dependencies built using a different
# build path, to check for relocation issues.
test_recipe () {
    local recipe=$1
    local first=$2
    local recipenum=$3
    local recipecount=$4

    if [[ -z $(get_sstate_pkgs $recipe $sstate_dir.populated) ]]; then
        echo >&2 "Error: no pre-populated sstate packages found for $recipe"
        return 1
    fi

    if grep -qx "$recipe" $excludefile; then
        state=Excluded
    elif [[ $first -eq 1 ]] || grep -qx "$recipe" $completedfile 2>/dev/null || \
         [[ $shortcircuit -eq 1 && $recipe != $target ]]; then
        state=Skipping
    else
        state=Testing
    fi
    progress $recipe $state $recipenum $recipecount
    if [[ "$state" = "Testing" ]]; then
        ret=0
        log incomplete.$recipe build $recipe || ret=$?
        if [[ $ret -eq 0 ]]; then
            rebuilt=0
            for sstate_pkg in $(get_sstate_pkgs $recipe $sstate_dir); do
                base=$(basename $sstate_pkg)
                if [[ ! -e $sstate_dir.populated/$base ]]; then
                    echo >&2 "Warning: signature changed for $recipe"
                    rebuilt=1
                fi
            done
            if [[ $rebuilt -eq 0 ]]; then
                mv $logdir/incomplete.$recipe.log $logdir/results/succeeded.$recipe.log
            else
                mv $logdir/incomplete.$recipe.log $logdir/results/rebuilt.$recipe.log
            fi
            echo $recipe >> $completedfile
            state=Completed
        else
            mv $logdir/incomplete.$recipe.log $logdir/results/failed.$recipe.log
            state=Failed
        fi
    elif [[ "$state" != "Excluded" ]]; then
        state=Skipped
    fi
    copy_sstate $recipe $sstate_dir.populated $sstate_dir
    progress $recipe $state $recipenum $recipecount
    if [[ $recipenum -eq $recipecount ]]; then
        echo
    fi
}

# Show progress bar
progress () {
    local recipe=$1
    local state=$2
    local recipenum=$3
    local recipecount=$4

    if [[ $verbose -eq 0 ]]; then
        percent=$(($recipenum * 100 / $recipecount))
        printf "%-30s %3.1d%% [%d/%d]%10s\\r" "$state $recipe" $percent $recipenum $recipecount " "
    else
        echo "$recipe: $state"
    fi
}

log () {
    local logfile=$1
    shift
    if [[ $verbose -eq 1 ]]; then
        eval "$@" 2>&1 | tee $logdir/$logfile.log
    else
        eval "$@" 2>&1 >$logdir/$logfile.log
    fi
}

build () {
    bake -c populate_sysroot $1 || return $?
    bake -c clean $1 || true
}

# Run bitbake, handling ^C
bake () {
    intr=0
    local ret=0

    trap "kill %-; intr=1" INT
    if [[ $verbose -eq 1 ]]; then
        bitbake "$@" &
    else
        bitbake "$@" </dev/null &
    fi
    wait %- || ret=$?
    if [[ $intr -eq 1 ]]; then
        echo Interrupted.
        exit $ret
    fi
    trap - INT
    return $ret
}

get_sstate_pkgs () {
    local pkg=$1
    local dir=$2
    for sstate_pkg in $dir/sstate-$pkg-*; do
        if [[ ! -e $sstate_pkg ]] || [[ -e $to/${sstate_pkg##*/} ]]; then
            continue
        fi

        postfixed=0
        for postfix in $postfixes; do
            if echo "$sstate_pkg" | grep -q "^$dir/sstate-$pkg-$postfix-"; then
                postfixed=1
            fi
        done
        if [[ $postfixed -eq 1 ]]; then
            continue
        fi

        echo $sstate_pkg
    done
}

# Copy the sstate(s) for the specific pkg, from the specified source
# sstate directory to the specified destination sstate directory
copy_sstate () {
    local pkg=$1
    local from=$2
    local to=$3

    mkdir -p $to
    get_sstate_pkgs $pkg $from | while read sstate_pkg; do
        info "Copying $sstate_pkg to $to"
        ln 2>/dev/null $sstate_pkg $to/ || \
            cp -f $sstate_pkg $to/
    done
}

info () {
    if [[ $verbose -eq 1 ]]; then
        echo >&2 "$@"
    fi
}


main "$@"
